{"ast":null,"code":"import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'];\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = ('ontouchstart' in Konva._global);\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n  return snapped;\n}\nexport class Transformer extends Group {\n  constructor(config) {\n    super(config);\n    this._transforming = false;\n    this._createElements();\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n  setNode(node) {\n    Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n  _getEventNamespace() {\n    return EVENTS_NAME + this._id;\n  }\n  setNodes() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n    this._nodes = nodes;\n    if (nodes.length === 1 && this.useSingleNodeRotation()) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n    this._nodes.forEach(node => {\n      const onChange = () => {\n        if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n        this._resetTransformCache();\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n      const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + this._getEventNamespace()).join(' ');\n      node.on(additionalEvents, onChange);\n      node.on(TRANSFORM_CHANGE_STR.map(e => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n      node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n      this._proxyDrag(node);\n    });\n    this._resetTransformCache();\n    var elementsCreated = !!this.findOne('.top-left');\n    if (elementsCreated) {\n      this.update();\n    }\n    return this;\n  }\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${this._getEventNamespace()}`, e => {\n      lastPos = node.getAbsolutePosition();\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${this._getEventNamespace()}`, e => {\n      if (!lastPos) {\n        return;\n      }\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n        if (otherNode.isDragging()) {\n          return;\n        }\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n  getNodes() {\n    return this._nodes || [];\n  }\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + this._getEventNamespace());\n      });\n    }\n    this._nodes = [];\n    this._resetTransformCache();\n  }\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n    this._clearCache('transform');\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n  __getNodeShape(node) {\n    let rot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rotation();\n    let relative = arguments.length > 2 ? arguments[2] : undefined;\n    var rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    var absScale = node.getAbsoluteScale(relative);\n    var absPos = node.getAbsolutePosition(relative);\n    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n  __getNodeRect() {\n    var node = this.getNode();\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        var transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Transform();\n    tr.rotate(-Konva.getAngle(this.rotation()));\n    var minX, minY, maxX, maxY;\n    totalPoints.forEach(function (point) {\n      var transformed = tr.point(point);\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Konva.getAngle(this.rotation())\n    };\n  }\n  getX() {\n    return this._getNodeRect().x;\n  }\n  getY() {\n    return this._getNodeRect().y;\n  }\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n  _createElements() {\n    this._createBack();\n    ANCHORS_NAMES.forEach(function (name) {\n      this._createAnchor(name);\n    }.bind(this));\n    this._createAnchor('rotater');\n  }\n  _createAnchor(name) {\n    var anchor = new Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    var self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      var rad = Konva.getAngle(this.rotation());\n      var cursor = getCursor(name, rad);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n  _createBack() {\n    var back = new Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      draggable: true,\n      sceneFunc(ctx) {\n        var tr = this.getParent();\n        var padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n        ctx.moveTo(this.width() / 2, -padding);\n        if (tr.rotateEnabled()) {\n          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n        }\n        ctx.fillStrokeShape(this);\n      },\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n        var padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n    this._proxyDrag(back);\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    this.on('dragmove', e => {\n      this.update();\n    });\n  }\n  _handleMouseDown(e) {\n    this._movingAnchorName = e.target.name().split(' ')[0];\n    var attrs = this._getNodeRect();\n    var width = attrs.width;\n    var height = attrs.height;\n    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n    this._transforming = true;\n    var ap = e.target.getAbsolutePosition();\n    var pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n    this._fire('transformstart', {\n      evt: e.evt,\n      target: this.getNode()\n    });\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e.evt,\n        target\n      });\n    });\n  }\n  _handleMouseMove(e) {\n    var x, y, newHypotenuse;\n    var anchorNode = this.findOne('.' + this._movingAnchorName);\n    var stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    let newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n    if (this.anchorDragBoundFunc()) {\n      newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n    }\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n    if (this._movingAnchorName === 'rotater') {\n      var attrs = this._getNodeRect();\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n      var oldRotation = Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n      this._fitNodesInto(shape, e);\n      return;\n    }\n    var keepProportion = this.keepRatio() || e.shiftKey;\n    var centeredScaling = this.centeredScaling() || e.altKey;\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n    var centeredScaling = this.centeredScaling() || e.altKey;\n    if (centeredScaling) {\n      var topLeft = this.findOne('.top-left');\n      var bottomRight = this.findOne('.bottom-right');\n      var topOffsetX = topLeft.x();\n      var topOffsetY = topLeft.y();\n      var bottomOffsetX = this.getWidth() - bottomRight.x();\n      var bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n    var absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Konva.getAngle(this.rotation())\n    }, e);\n  }\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n  _removeEvents(e) {\n    if (this._transforming) {\n      this._transforming = false;\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n      var node = this.getNode();\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n      if (node) {\n        this._nodes.forEach(target => {\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n        });\n      }\n      this._movingAnchorName = null;\n    }\n  }\n  _fitNodesInto(newAttrs, evt) {\n    var oldAttrs = this._getNodeRect();\n    const minSize = 1;\n    if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    const allowNegativeScale = this.flipEnabled();\n    var t = new Transform();\n    t.rotate(Konva.getAngle(this.rotation()));\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n    const baseSize = 10000000;\n    const oldTr = new Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Transform();\n    newTr.translate(newAttrs.x, newAttrs.y);\n    newTr.rotate(newAttrs.rotation);\n    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n    const delta = newTr.multiply(oldTr.invert());\n    this._nodes.forEach(node => {\n      var _a;\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n    this.rotation(Util._getRotation(newAttrs.rotation));\n    this._resetTransformCache();\n    this.update();\n    this.getLayer().batchDraw();\n  }\n  forceUpdate() {\n    this._resetTransformCache();\n    this.update();\n  }\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n  update() {\n    var _a;\n    var attrs = this._getNodeRect();\n    this.rotation(Util._getRotation(attrs.rotation));\n    var width = attrs.width;\n    var height = attrs.height;\n    var enabledAnchors = this.enabledAnchors();\n    var resizeEnabled = this.resizeEnabled();\n    var padding = this.padding();\n    var anchorSize = this.anchorSize();\n    this.find('._anchor').forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      x: 0,\n      y: 0\n    });\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n  isTransforming() {\n    return this._transforming;\n  }\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n    Group.prototype.destroy.call(this);\n    this.detach();\n    this._removeEvents();\n    return this;\n  }\n  toObject() {\n    return Node.prototype.toObject.call(this);\n  }\n  getClientRect() {\n    if (this.nodes().length > 0) {\n      return super.getClientRect();\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n  }\n}\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n  return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"names":["Util","Transform","Factory","Node","Shape","Rect","Group","Konva","getBooleanValidator","getNumberValidator","_registerNode","EVENTS_NAME","ATTR_CHANGE_LIST","map","e","join","NODES_RECT","TRANSFORM_CHANGE_STR","ANGLES","TOUCH_DEVICE","_global","getCursor","anchorName","rad","degToRad","angle","radToDeg","_inRange","error","ANCHORS_NAMES","MAX_SAFE_INTEGER","getCenter","shape","x","width","Math","cos","rotation","height","sin","y","rotateAroundPoint","angleRad","point","Object","assign","rotateAroundCenter","deltaRad","center","getSnap","snaps","newRotationRad","tol","snapped","i","length","getAngle","absDiff","abs","PI","dif","min","Transformer","constructor","config","_transforming","_createElements","_handleMouseMove","bind","_handleMouseUp","update","on","getNode","attachTo","node","setNode","warn","setNodes","_nodes","_getEventNamespace","_id","nodes","detach","useSingleNodeRotation","getAbsoluteRotation","forEach","onChange","_resetTransformCache","isDragging","additionalEvents","_attrsAffectingSize","prop","_proxyDrag","elementsCreated","findOne","lastPos","getAbsolutePosition","startDrag","dx","dy","otherNode","otherAbs","setAbsolutePosition","getNodes","getActiveAnchor","_movingAnchorName","off","_clearCache","_clearSelfAndDescendantCache","_getNodeRect","_getCache","__getNodeRect","__getNodeShape","rot","relative","rect","getClientRect","skipTransform","skipShadow","skipStroke","ignoreStroke","absScale","getAbsoluteScale","absPos","offsetX","offsetY","box","totalPoints","points","trans","getAbsoluteTransform","transformed","push","tr","rotate","minX","minY","maxX","maxY","undefined","max","invert","p","getX","getY","getWidth","getHeight","_createBack","name","_createAnchor","anchor","stroke","fill","strokeWidth","dragDistance","draggable","hitStrokeWidth","self","_handleMouseDown","stopDrag","cancelBubble","cursor","getStage","content","style","_cursorChange","add","back","sceneFunc","ctx","getParent","padding","beginPath","moveTo","rotateEnabled","lineTo","rotateAnchorOffset","_sign","fillStrokeShape","hitFunc","shouldOverdrawWholeArea","target","split","attrs","hypotenuse","sqrt","pow","window","addEventListener","ap","pos","getPointerPosition","_anchorDragOffset","_fire","evt","newHypotenuse","anchorNode","stage","setPointersPositions","pp","newNodePos","oldAbs","anchorDragBoundFunc","newAbs","delta","atan2","oldRotation","newRotation","rotationSnapTolerance","snappedRot","rotationSnaps","diff","_fitNodesInto","keepProportion","keepRatio","shiftKey","centeredScaling","altKey","comparePoint","reverseX","reverseY","position","console","Error","topLeft","bottomRight","topOffsetX","topOffsetY","bottomOffsetX","bottomOffsetY","move","_removeEvents","getTransform","removeEventListener","newAttrs","oldAttrs","minSize","allowNegativeScale","flipEnabled","t","indexOf","offset","replace","boundBoxFunc","bounded","baseSize","oldTr","translate","scale","newTr","multiply","_a","parentTransform","localTransform","copy","newLocalTransform","decompose","setAttrs","getLayer","batchDraw","_getRotation","forceUpdate","_batchChangeChild","selector","enabledAnchors","resizeEnabled","anchorSize","find","anchorStroke","anchorStrokeWidth","anchorFill","cornerRadius","anchorCornerRadius","visible","borderEnabled","borderStroke","borderStrokeWidth","dash","borderDash","isTransforming","stopTransform","destroy","prototype","call","toObject","validateAnchors","val","Array","className","addGetterSetter","backCompat","lineEnabled","rotateHandlerOffset","enabledHandlers"],"sources":["/Users/tylerwilson/Documents/GitHub/KahaniRectangle/kahani-rectangle/node_modules/konva/lib/shapes/Transformer.js"],"sourcesContent":["import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n];\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nexport class Transformer extends Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    _getEventNamespace() {\n        return EVENTS_NAME + this._id;\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        this._nodes = nodes;\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const onChange = () => {\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + this._getEventNamespace())\n                .join(' ');\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + this._getEventNamespace());\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Transform();\n        tr.rotate(-Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        this.on('dragmove', (e) => {\n            this.update();\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e.evt, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e.evt, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        let newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        if (this.anchorDragBoundFunc()) {\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n        }\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var keepProportion = this.keepRatio() || e.shiftKey;\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Transform();\n        t.rotate(Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node.prototype.toObject.call(this);\n    }\n    getClientRect() {\n        if (this.nodes().length > 0) {\n            return super.getClientRect();\n        }\n        else {\n            return { x: 0, y: 0, width: 0, height: 0 };\n        }\n    }\n}\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}