{"ast":null,"code":"import _classCallCheck from \"/Users/tylerwilson/Documents/GitHub/KahaniRectangle/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tylerwilson/Documents/GitHub/KahaniRectangle/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tylerwilson/Documents/GitHub/KahaniRectangle/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tylerwilson/Documents/GitHub/KahaniRectangle/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n  return Array.from(string);\n}\nvar AUTO = 'auto',\n  CENTER = 'center',\n  JUSTIFY = 'justify',\n  CHANGE_KONVA = 'Change.konva',\n  CONTEXT_2D = '2d',\n  DASH = '-',\n  LEFT = 'left',\n  TEXT = 'text',\n  TEXT_UPPER = 'Text',\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  MIDDLE = 'middle',\n  NORMAL = 'normal',\n  PX_SPACE = 'px ',\n  SPACE = ' ',\n  RIGHT = 'right',\n  WORD = 'word',\n  CHAR = 'char',\n  NONE = 'none',\n  ELLIPSIS = 'â€¦',\n  ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n  attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(function (family) {\n    family = family.trim();\n    var hasSpace = family.indexOf(' ') >= 0;\n    var hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n    if (hasSpace && !hasQuotes) {\n      family = \"\\\"\".concat(family, \"\\\"\");\n    }\n    return family;\n  }).join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n  dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n  config = config || {};\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n  return config;\n}\nexport var Text = /*#__PURE__*/function (_Shape) {\n  _inherits(Text, _Shape);\n  var _super = _createSuper(Text);\n  function Text(config) {\n    var _this;\n    _classCallCheck(this, Text);\n    _this = _super.call(this, checkDefaultFill(config));\n    _this._partialTextX = 0;\n    _this._partialTextY = 0;\n    for (var n = 0; n < attrChangeListLen; n++) {\n      _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\n    }\n    _this._setTextData();\n    return _this;\n  }\n  _createClass(Text, [{\n    key: \"_sceneFunc\",\n    value: function _sceneFunc(context) {\n      var textArr = this.textArr,\n        textArrLen = textArr.length;\n      if (!this.text()) {\n        return;\n      }\n      var padding = this.padding(),\n        fontSize = this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        verticalAlign = this.verticalAlign(),\n        alignY = 0,\n        align = this.align(),\n        totalWidth = this.getWidth(),\n        letterSpacing = this.letterSpacing(),\n        fill = this.fill(),\n        textDecoration = this.textDecoration(),\n        shouldUnderline = textDecoration.indexOf('underline') !== -1,\n        shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n        n;\n      var translateY = 0;\n      var translateY = lineHeightPx / 2;\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      context.setAttr('font', this._getContextFont());\n      context.setAttr('textBaseline', MIDDLE);\n      context.setAttr('textAlign', LEFT);\n      if (verticalAlign === MIDDLE) {\n        alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n      } else if (verticalAlign === BOTTOM) {\n        alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n      }\n      context.translate(padding, alignY + padding);\n      for (n = 0; n < textArrLen; n++) {\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        var obj = textArr[n],\n          text = obj.text,\n          width = obj.width,\n          lastLine = obj.lastInParagraph,\n          spacesNumber,\n          oneWord,\n          lineWidth;\n        context.save();\n        if (align === RIGHT) {\n          lineTranslateX += totalWidth - width - padding * 2;\n        } else if (align === CENTER) {\n          lineTranslateX += (totalWidth - width - padding * 2) / 2;\n        }\n        if (shouldUnderline) {\n          context.save();\n          context.beginPath();\n          context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n          spacesNumber = text.split(' ').length - 1;\n          oneWord = spacesNumber === 0;\n          lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n          context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n          context.lineWidth = fontSize / 15;\n          context.strokeStyle = fill;\n          context.stroke();\n          context.restore();\n        }\n        if (shouldLineThrough) {\n          context.save();\n          context.beginPath();\n          context.moveTo(lineTranslateX, translateY + lineTranslateY);\n          spacesNumber = text.split(' ').length - 1;\n          oneWord = spacesNumber === 0;\n          lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n          context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n          context.lineWidth = fontSize / 15;\n          context.strokeStyle = fill;\n          context.stroke();\n          context.restore();\n        }\n        if (letterSpacing !== 0 || align === JUSTIFY) {\n          spacesNumber = text.split(' ').length - 1;\n          var array = stringToArray(text);\n          for (var li = 0; li < array.length; li++) {\n            var letter = array[li];\n            if (letter === ' ' && !lastLine && align === JUSTIFY) {\n              lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n            }\n            this._partialTextX = lineTranslateX;\n            this._partialTextY = translateY + lineTranslateY;\n            this._partialText = letter;\n            context.fillStrokeShape(this);\n            lineTranslateX += this.measureSize(letter).width + letterSpacing;\n          }\n        } else {\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = text;\n          context.fillStrokeShape(this);\n        }\n        context.restore();\n        if (textArrLen > 1) {\n          translateY += lineHeightPx;\n        }\n      }\n    }\n  }, {\n    key: \"_hitFunc\",\n    value: function _hitFunc(context) {\n      var width = this.getWidth(),\n        height = this.getHeight();\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      var str = Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n      this._setAttr(TEXT, str);\n      return this;\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n      return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n      return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n    }\n  }, {\n    key: \"getTextWidth\",\n    value: function getTextWidth() {\n      return this.textWidth;\n    }\n  }, {\n    key: \"getTextHeight\",\n    value: function getTextHeight() {\n      Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n      return this.textHeight;\n    }\n  }, {\n    key: \"measureSize\",\n    value: function measureSize(text) {\n      var _context = getDummyContext(),\n        fontSize = this.fontSize(),\n        metrics;\n      _context.save();\n      _context.font = this._getContextFont();\n      metrics = _context.measureText(text);\n      _context.restore();\n      return {\n        width: metrics.width,\n        height: fontSize\n      };\n    }\n  }, {\n    key: \"_getContextFont\",\n    value: function _getContextFont() {\n      return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n    }\n  }, {\n    key: \"_addTextLine\",\n    value: function _addTextLine(line) {\n      if (this.align() === JUSTIFY) {\n        line = line.trim();\n      }\n      var width = this._getTextWidth(line);\n      return this.textArr.push({\n        text: line,\n        width: width,\n        lastInParagraph: false\n      });\n    }\n  }, {\n    key: \"_getTextWidth\",\n    value: function _getTextWidth(text) {\n      var letterSpacing = this.letterSpacing();\n      var length = text.length;\n      return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n    }\n  }, {\n    key: \"_setTextData\",\n    value: function _setTextData() {\n      var lines = this.text().split('\\n'),\n        fontSize = +this.fontSize(),\n        textWidth = 0,\n        lineHeightPx = this.lineHeight() * fontSize,\n        width = this.attrs.width,\n        height = this.attrs.height,\n        fixedWidth = width !== AUTO && width !== undefined,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        maxHeightPx = height - padding * 2,\n        currentHeightPx = 0,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE,\n        wrapAtWord = wrap !== CHAR && shouldWrap,\n        shouldAddEllipsis = this.ellipsis();\n      this.textArr = [];\n      getDummyContext().font = this._getContextFont();\n      var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n      for (var i = 0, max = lines.length; i < max; ++i) {\n        var line = lines[i];\n        var lineWidth = this._getTextWidth(line);\n        if (fixedWidth && lineWidth > maxWidth) {\n          while (line.length > 0) {\n            var low = 0,\n              high = line.length,\n              match = '',\n              matchWidth = 0;\n            while (low < high) {\n              var mid = low + high >>> 1,\n                substr = line.slice(0, mid + 1),\n                substrWidth = this._getTextWidth(substr) + additionalWidth;\n              if (substrWidth <= maxWidth) {\n                low = mid + 1;\n                match = substr;\n                matchWidth = substrWidth;\n              } else {\n                high = mid;\n              }\n            }\n            if (match) {\n              if (wrapAtWord) {\n                var wrapIndex;\n                var nextChar = line[match.length];\n                var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                  wrapIndex = match.length;\n                } else {\n                  wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n                }\n                if (wrapIndex > 0) {\n                  low = wrapIndex;\n                  match = match.slice(0, low);\n                  matchWidth = this._getTextWidth(match);\n                }\n              }\n              match = match.trimRight();\n              this._addTextLine(match);\n              textWidth = Math.max(textWidth, matchWidth);\n              currentHeightPx += lineHeightPx;\n              var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n              if (shouldHandleEllipsis) {\n                this._tryToAddEllipsisToLastLine();\n                break;\n              }\n              line = line.slice(low);\n              line = line.trimLeft();\n              if (line.length > 0) {\n                lineWidth = this._getTextWidth(line);\n                if (lineWidth <= maxWidth) {\n                  this._addTextLine(line);\n                  currentHeightPx += lineHeightPx;\n                  textWidth = Math.max(textWidth, lineWidth);\n                  break;\n                }\n              }\n            } else {\n              break;\n            }\n          }\n        } else {\n          this._addTextLine(line);\n          currentHeightPx += lineHeightPx;\n          textWidth = Math.max(textWidth, lineWidth);\n          if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n            this._tryToAddEllipsisToLastLine();\n          }\n        }\n        if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n          break;\n        }\n        if (this.textArr[this.textArr.length - 1]) {\n          this.textArr[this.textArr.length - 1].lastInParagraph = true;\n        }\n      }\n      this.textHeight = fontSize;\n      this.textWidth = textWidth;\n    }\n  }, {\n    key: \"_shouldHandleEllipsis\",\n    value: function _shouldHandleEllipsis(currentHeightPx) {\n      var fontSize = +this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        height = this.attrs.height,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxHeightPx = height - padding * 2,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE;\n      return !shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n    }\n  }, {\n    key: \"_tryToAddEllipsisToLastLine\",\n    value: function _tryToAddEllipsisToLastLine() {\n      var width = this.attrs.width,\n        fixedWidth = width !== AUTO && width !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        shouldAddEllipsis = this.ellipsis();\n      var lastLine = this.textArr[this.textArr.length - 1];\n      if (!lastLine || !shouldAddEllipsis) {\n        return;\n      }\n      if (fixedWidth) {\n        var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n        if (!haveSpace) {\n          lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n        }\n      }\n      this.textArr.splice(this.textArr.length - 1, 1);\n      this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n  }, {\n    key: \"getStrokeScaleEnabled\",\n    value: function getStrokeScaleEnabled() {\n      return true;\n    }\n  }]);\n  return Text;\n}(Shape);\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"names":["Util","Factory","Shape","getNumberValidator","getStringValidator","getNumberOrAutoValidator","getBooleanValidator","_registerNode","stringToArray","string","Array","from","AUTO","CENTER","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","length","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Text","n","on","_setTextData","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","lineTranslateX","lineTranslateY","setAttr","_getContextFont","getHeight","translate","obj","width","lastLine","lastInParagraph","spacesNumber","oneWord","lineWidth","save","beginPath","moveTo","Math","round","lineTo","strokeStyle","stroke","restore","array","li","letter","fillStrokeShape","measureSize","height","rect","closePath","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","warn","textHeight","_context","metrics","font","measureText","fontStyle","fontVariant","line","_getTextWidth","push","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","substr","slice","substrWidth","wrapIndex","nextChar","nextIsSpaceOrDash","lastIndexOf","trimRight","_addTextLine","shouldHandleEllipsis","_shouldHandleEllipsis","_tryToAddEllipsisToLastLine","trimLeft","haveSpace","splice","prototype","className","_attrsAffectingSize","overWriteSetter","addGetterSetter"],"sources":["/Users/tylerwilson/Documents/GitHub/KahaniRectangle/node_modules/konva/lib/shapes/Text.js"],"sourcesContent":["import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator, } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n    return Array.from(string);\n}\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nexport class Text extends Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n                        if (shouldHandleEllipsis) {\n                            this._tryToAddEllipsisToLastLine();\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n                    this._tryToAddEllipsisToLastLine();\n                }\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    _shouldHandleEllipsis(currentHeightPx) {\n        var fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;\n        return (!shouldWrap ||\n            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));\n    }\n    _tryToAddEllipsisToLastLine() {\n        var width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();\n        var lastLine = this.textArr[this.textArr.length - 1];\n        if (!lastLine || !shouldAddEllipsis) {\n            return;\n        }\n        if (fixedWidth) {\n            var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n            if (!haveSpace) {\n                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n            }\n        }\n        this.textArr.splice(this.textArr.length - 1, 1);\n        this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}